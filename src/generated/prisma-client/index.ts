// Code generated by Prisma (prisma@1.19.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  option: (where?: OptionWhereInput) => Promise<boolean>;
  poll: (where?: PollWhereInput) => Promise<boolean>;
  recipient: (where?: RecipientWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  option: (where: OptionWhereUniqueInput) => Option;
  options: (
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OptionNode>;
  optionsConnection: (
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OptionConnection;
  poll: (where: PollWhereUniqueInput) => Poll;
  polls: (
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PollNode>;
  pollsConnection: (
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PollConnection;
  recipient: (where: RecipientWhereUniqueInput) => Recipient;
  recipients: (
    args?: {
      where?: RecipientWhereInput;
      orderBy?: RecipientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RecipientNode>;
  recipientsConnection: (
    args?: {
      where?: RecipientWhereInput;
      orderBy?: RecipientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RecipientConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  vote: (where: VoteWhereUniqueInput) => Vote;
  votes: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<VoteNode>;
  votesConnection: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOption: (data: OptionCreateInput) => Option;
  updateOption: (
    args: { data: OptionUpdateInput; where: OptionWhereUniqueInput }
  ) => Option;
  updateManyOptions: (
    args: { data: OptionUpdateInput; where?: OptionWhereInput }
  ) => BatchPayload;
  upsertOption: (
    args: {
      where: OptionWhereUniqueInput;
      create: OptionCreateInput;
      update: OptionUpdateInput;
    }
  ) => Option;
  deleteOption: (where: OptionWhereUniqueInput) => Option;
  deleteManyOptions: (where?: OptionWhereInput) => BatchPayload;
  createPoll: (data: PollCreateInput) => Poll;
  updatePoll: (
    args: { data: PollUpdateInput; where: PollWhereUniqueInput }
  ) => Poll;
  updateManyPolls: (
    args: { data: PollUpdateInput; where?: PollWhereInput }
  ) => BatchPayload;
  upsertPoll: (
    args: {
      where: PollWhereUniqueInput;
      create: PollCreateInput;
      update: PollUpdateInput;
    }
  ) => Poll;
  deletePoll: (where: PollWhereUniqueInput) => Poll;
  deleteManyPolls: (where?: PollWhereInput) => BatchPayload;
  createRecipient: (data: RecipientCreateInput) => Recipient;
  updateRecipient: (
    args: { data: RecipientUpdateInput; where: RecipientWhereUniqueInput }
  ) => Recipient;
  updateManyRecipients: (
    args: { data: RecipientUpdateInput; where?: RecipientWhereInput }
  ) => BatchPayload;
  upsertRecipient: (
    args: {
      where: RecipientWhereUniqueInput;
      create: RecipientCreateInput;
      update: RecipientUpdateInput;
    }
  ) => Recipient;
  deleteRecipient: (where: RecipientWhereUniqueInput) => Recipient;
  deleteManyRecipients: (where?: RecipientWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createVote: (data: VoteCreateInput) => Vote;
  updateVote: (
    args: { data: VoteUpdateInput; where: VoteWhereUniqueInput }
  ) => Vote;
  updateManyVotes: (
    args: { data: VoteUpdateInput; where?: VoteWhereInput }
  ) => BatchPayload;
  upsertVote: (
    args: {
      where: VoteWhereUniqueInput;
      create: VoteCreateInput;
      update: VoteUpdateInput;
    }
  ) => Vote;
  deleteVote: (where: VoteWhereUniqueInput) => Vote;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  option: (
    where?: OptionSubscriptionWhereInput
  ) => OptionSubscriptionPayloadSubscription;
  poll: (
    where?: PollSubscriptionWhereInput
  ) => PollSubscriptionPayloadSubscription;
  recipient: (
    where?: RecipientSubscriptionWhereInput
  ) => RecipientSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AccessType = "PUBLIC" | "PRIVATE";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RecipientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "hasSentEmail_ASC"
  | "hasSentEmail_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PollOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "access_ASC"
  | "access_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "isClosed_ASC"
  | "isClosed_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VoteUpdateWithoutOptionDataInput {
  poll?: PollUpdateOneRequiredInput;
  creator?: UserUpdateOneRequiredWithoutVotesInput;
  isActive?: Boolean;
}

export type OptionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OptionUpdateWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput;
  data: OptionUpdateWithoutPollDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  polls_every?: PollWhereInput;
  polls_some?: PollWhereInput;
  polls_none?: PollWhereInput;
  voted_every?: PollWhereInput;
  voted_some?: PollWhereInput;
  voted_none?: PollWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  isActive?: Boolean;
  isActive_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface OptionCreateOneWithoutVotesInput {
  create?: OptionCreateWithoutVotesInput;
  connect?: OptionWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutVotedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutVotedDataInput;
  create: UserCreateWithoutVotedInput;
}

export interface OptionCreateWithoutVotesInput {
  description: String;
  poll: PollCreateOneWithoutOptionsInput;
  creator: UserCreateOneInput;
  isActive?: Boolean;
}

export interface OptionUpdateWithoutPollDataInput {
  description?: String;
  votes?: VoteUpdateManyWithoutOptionInput;
  creator?: UserUpdateOneRequiredInput;
  isActive?: Boolean;
}

export interface PollCreateOneWithoutOptionsInput {
  create?: PollCreateWithoutOptionsInput;
  connect?: PollWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PollCreateWithoutOptionsInput {
  title: String;
  description: String;
  recipients?: RecipientCreateManyWithoutPollInput;
  voted?: UserCreateManyWithoutVotedInput;
  creator: UserCreateOneWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface PollWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  options_every?: OptionWhereInput;
  options_some?: OptionWhereInput;
  options_none?: OptionWhereInput;
  recipients_every?: RecipientWhereInput;
  recipients_some?: RecipientWhereInput;
  recipients_none?: RecipientWhereInput;
  voted_every?: UserWhereInput;
  voted_some?: UserWhereInput;
  voted_none?: UserWhereInput;
  creator?: UserWhereInput;
  access?: AccessType;
  access_not?: AccessType;
  access_in?: AccessType[] | AccessType;
  access_not_in?: AccessType[] | AccessType;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  isClosed?: Boolean;
  isClosed_not?: Boolean;
  isActive?: Boolean;
  isActive_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PollWhereInput[] | PollWhereInput;
  OR?: PollWhereInput[] | PollWhereInput;
  NOT?: PollWhereInput[] | PollWhereInput;
}

export interface UserCreateOneWithoutPollsInput {
  create?: UserCreateWithoutPollsInput;
  connect?: UserWhereUniqueInput;
}

export interface PollSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PollWhereInput;
  AND?: PollSubscriptionWhereInput[] | PollSubscriptionWhereInput;
  OR?: PollSubscriptionWhereInput[] | PollSubscriptionWhereInput;
  NOT?: PollSubscriptionWhereInput[] | PollSubscriptionWhereInput;
}

export interface UserCreateWithoutPollsInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  voted?: PollCreateManyWithoutVotedInput;
  votes?: VoteCreateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface OptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OptionWhereInput;
  AND?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
  OR?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
  NOT?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
}

export interface PollCreateManyWithoutVotedInput {
  create?: PollCreateWithoutVotedInput[] | PollCreateWithoutVotedInput;
  connect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
}

export interface VoteCreateInput {
  option: OptionCreateOneWithoutVotesInput;
  poll: PollCreateOneInput;
  creator: UserCreateOneWithoutVotesInput;
  isActive?: Boolean;
}

export interface PollCreateWithoutVotedInput {
  title: String;
  description: String;
  options?: OptionCreateManyWithoutPollInput;
  recipients?: RecipientCreateManyWithoutPollInput;
  creator: UserCreateOneWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface PollUpsertWithoutRecipientsInput {
  update: PollUpdateWithoutRecipientsDataInput;
  create: PollCreateWithoutRecipientsInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export type PollWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutVotesInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  polls?: PollCreateManyWithoutCreatorInput;
  voted?: PollCreateManyWithoutVotedInput;
  isActive?: Boolean;
}

export interface RecipientUpdateInput {
  email?: String;
  poll?: PollUpdateOneRequiredWithoutRecipientsInput;
  hasSentEmail?: Boolean;
}

export interface OptionUpdateInput {
  description?: String;
  votes?: VoteUpdateManyWithoutOptionInput;
  poll?: PollUpdateOneRequiredWithoutOptionsInput;
  creator?: UserUpdateOneRequiredInput;
  isActive?: Boolean;
}

export type RecipientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpdateManyWithoutOptionInput {
  create?: VoteCreateWithoutOptionInput[] | VoteCreateWithoutOptionInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutOptionInput[]
    | VoteUpdateWithWhereUniqueWithoutOptionInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutOptionInput[]
    | VoteUpsertWithWhereUniqueWithoutOptionInput;
}

export interface RecipientCreateInput {
  email: String;
  poll: PollCreateOneWithoutRecipientsInput;
  hasSentEmail?: Boolean;
}

export interface VoteUpdateWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutOptionDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface PollUpdateOneRequiredInput {
  create?: PollCreateInput;
  update?: PollUpdateDataInput;
  upsert?: PollUpsertNestedInput;
  connect?: PollWhereUniqueInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PollUpdateDataInput {
  title?: String;
  description?: String;
  options?: OptionUpdateManyWithoutPollInput;
  recipients?: RecipientUpdateManyWithoutPollInput;
  voted?: UserUpdateManyWithoutVotedInput;
  creator?: UserUpdateOneRequiredWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface PollUpsertNestedInput {
  update: PollUpdateDataInput;
  create: PollCreateInput;
}

export interface OptionUpdateManyWithoutPollInput {
  create?: OptionCreateWithoutPollInput[] | OptionCreateWithoutPollInput;
  delete?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  connect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  disconnect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  update?:
    | OptionUpdateWithWhereUniqueWithoutPollInput[]
    | OptionUpdateWithWhereUniqueWithoutPollInput;
  upsert?:
    | OptionUpsertWithWhereUniqueWithoutPollInput[]
    | OptionUpsertWithWhereUniqueWithoutPollInput;
}

export interface VoteCreateManyWithoutOptionInput {
  create?: VoteCreateWithoutOptionInput[] | VoteCreateWithoutOptionInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface PollUpsertWithWhereUniqueWithoutCreatorInput {
  where: PollWhereUniqueInput;
  update: PollUpdateWithoutCreatorDataInput;
  create: PollCreateWithoutCreatorInput;
}

export interface PollCreateOneInput {
  create?: PollCreateInput;
  connect?: PollWhereUniqueInput;
}

export interface RecipientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  poll?: PollWhereInput;
  hasSentEmail?: Boolean;
  hasSentEmail_not?: Boolean;
  AND?: RecipientWhereInput[] | RecipientWhereInput;
  OR?: RecipientWhereInput[] | RecipientWhereInput;
  NOT?: RecipientWhereInput[] | RecipientWhereInput;
}

export interface OptionCreateManyWithoutPollInput {
  create?: OptionCreateWithoutPollInput[] | OptionCreateWithoutPollInput;
  connect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  polls?: PollUpdateManyWithoutCreatorInput;
  voted?: PollUpdateManyWithoutVotedInput;
  votes?: VoteUpdateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface PollCreateManyWithoutCreatorInput {
  create?: PollCreateWithoutCreatorInput[] | PollCreateWithoutCreatorInput;
  connect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
}

export interface PollUpdateManyWithoutCreatorInput {
  create?: PollCreateWithoutCreatorInput[] | PollCreateWithoutCreatorInput;
  delete?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  connect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  disconnect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  update?:
    | PollUpdateWithWhereUniqueWithoutCreatorInput[]
    | PollUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | PollUpsertWithWhereUniqueWithoutCreatorInput[]
    | PollUpsertWithWhereUniqueWithoutCreatorInput;
}

export interface RecipientCreateManyWithoutPollInput {
  create?: RecipientCreateWithoutPollInput[] | RecipientCreateWithoutPollInput;
  connect?: RecipientWhereUniqueInput[] | RecipientWhereUniqueInput;
}

export interface PollUpdateWithWhereUniqueWithoutCreatorInput {
  where: PollWhereUniqueInput;
  data: PollUpdateWithoutCreatorDataInput;
}

export interface UserCreateManyWithoutVotedInput {
  create?: UserCreateWithoutVotedInput[] | UserCreateWithoutVotedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface PollUpdateWithoutCreatorDataInput {
  title?: String;
  description?: String;
  options?: OptionUpdateManyWithoutPollInput;
  recipients?: RecipientUpdateManyWithoutPollInput;
  voted?: UserUpdateManyWithoutVotedInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface VoteCreateManyWithoutCreatorInput {
  create?: VoteCreateWithoutCreatorInput[] | VoteCreateWithoutCreatorInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface RecipientUpdateManyWithoutPollInput {
  create?: RecipientCreateWithoutPollInput[] | RecipientCreateWithoutPollInput;
  delete?: RecipientWhereUniqueInput[] | RecipientWhereUniqueInput;
  connect?: RecipientWhereUniqueInput[] | RecipientWhereUniqueInput;
  disconnect?: RecipientWhereUniqueInput[] | RecipientWhereUniqueInput;
  update?:
    | RecipientUpdateWithWhereUniqueWithoutPollInput[]
    | RecipientUpdateWithWhereUniqueWithoutPollInput;
  upsert?:
    | RecipientUpsertWithWhereUniqueWithoutPollInput[]
    | RecipientUpsertWithWhereUniqueWithoutPollInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface RecipientUpdateWithWhereUniqueWithoutPollInput {
  where: RecipientWhereUniqueInput;
  data: RecipientUpdateWithoutPollDataInput;
}

export interface OptionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  poll?: PollWhereInput;
  creator?: UserWhereInput;
  isActive?: Boolean;
  isActive_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OptionWhereInput[] | OptionWhereInput;
  OR?: OptionWhereInput[] | OptionWhereInput;
  NOT?: OptionWhereInput[] | OptionWhereInput;
}

export interface RecipientUpdateWithoutPollDataInput {
  email?: String;
  hasSentEmail?: Boolean;
}

export interface VoteUpdateInput {
  option?: OptionUpdateOneRequiredWithoutVotesInput;
  poll?: PollUpdateOneRequiredInput;
  creator?: UserUpdateOneRequiredWithoutVotesInput;
  isActive?: Boolean;
}

export interface RecipientUpsertWithWhereUniqueWithoutPollInput {
  where: RecipientWhereUniqueInput;
  update: RecipientUpdateWithoutPollDataInput;
  create: RecipientCreateWithoutPollInput;
}

export interface PollUpdateWithoutRecipientsDataInput {
  title?: String;
  description?: String;
  options?: OptionUpdateManyWithoutPollInput;
  voted?: UserUpdateManyWithoutVotedInput;
  creator?: UserUpdateOneRequiredWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface UserUpdateManyWithoutVotedInput {
  create?: UserCreateWithoutVotedInput[] | UserCreateWithoutVotedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutVotedInput[]
    | UserUpdateWithWhereUniqueWithoutVotedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutVotedInput[]
    | UserUpsertWithWhereUniqueWithoutVotedInput;
}

export interface PollCreateWithoutRecipientsInput {
  title: String;
  description: String;
  options?: OptionCreateManyWithoutPollInput;
  voted?: UserCreateManyWithoutVotedInput;
  creator: UserCreateOneWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface UserUpdateWithWhereUniqueWithoutVotedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutVotedDataInput;
}

export interface PollUpdateInput {
  title?: String;
  description?: String;
  options?: OptionUpdateManyWithoutPollInput;
  recipients?: RecipientUpdateManyWithoutPollInput;
  voted?: UserUpdateManyWithoutVotedInput;
  creator?: UserUpdateOneRequiredWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface UserUpdateWithoutVotedDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  polls?: PollUpdateManyWithoutCreatorInput;
  votes?: VoteUpdateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface UserUpdateWithoutVotesDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  polls?: PollUpdateManyWithoutCreatorInput;
  voted?: PollUpdateManyWithoutVotedInput;
  isActive?: Boolean;
}

export interface VoteUpdateManyWithoutCreatorInput {
  create?: VoteCreateWithoutCreatorInput[] | VoteCreateWithoutCreatorInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutCreatorInput[]
    | VoteUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutCreatorInput[]
    | VoteUpsertWithWhereUniqueWithoutCreatorInput;
}

export interface OptionUpsertWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput;
  update: OptionUpdateWithoutPollDataInput;
  create: OptionCreateWithoutPollInput;
}

export interface VoteUpdateWithWhereUniqueWithoutCreatorInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutCreatorDataInput;
}

export interface VoteCreateWithoutOptionInput {
  poll: PollCreateOneInput;
  creator: UserCreateOneWithoutVotesInput;
  isActive?: Boolean;
}

export interface VoteUpdateWithoutCreatorDataInput {
  option?: OptionUpdateOneRequiredWithoutVotesInput;
  poll?: PollUpdateOneRequiredInput;
  isActive?: Boolean;
}

export interface OptionCreateWithoutPollInput {
  description: String;
  votes?: VoteCreateManyWithoutOptionInput;
  creator: UserCreateOneInput;
  isActive?: Boolean;
}

export interface OptionUpdateOneRequiredWithoutVotesInput {
  create?: OptionCreateWithoutVotesInput;
  update?: OptionUpdateWithoutVotesDataInput;
  upsert?: OptionUpsertWithoutVotesInput;
  connect?: OptionWhereUniqueInput;
}

export interface PollCreateWithoutCreatorInput {
  title: String;
  description: String;
  options?: OptionCreateManyWithoutPollInput;
  recipients?: RecipientCreateManyWithoutPollInput;
  voted?: UserCreateManyWithoutVotedInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface OptionUpdateWithoutVotesDataInput {
  description?: String;
  poll?: PollUpdateOneRequiredWithoutOptionsInput;
  creator?: UserUpdateOneRequiredInput;
  isActive?: Boolean;
}

export interface UserCreateWithoutVotedInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  polls?: PollCreateManyWithoutCreatorInput;
  votes?: VoteCreateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface PollUpdateOneRequiredWithoutOptionsInput {
  create?: PollCreateWithoutOptionsInput;
  update?: PollUpdateWithoutOptionsDataInput;
  upsert?: PollUpsertWithoutOptionsInput;
  connect?: PollWhereUniqueInput;
}

export interface RecipientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RecipientWhereInput;
  AND?: RecipientSubscriptionWhereInput[] | RecipientSubscriptionWhereInput;
  OR?: RecipientSubscriptionWhereInput[] | RecipientSubscriptionWhereInput;
  NOT?: RecipientSubscriptionWhereInput[] | RecipientSubscriptionWhereInput;
}

export interface PollUpdateWithoutOptionsDataInput {
  title?: String;
  description?: String;
  recipients?: RecipientUpdateManyWithoutPollInput;
  voted?: UserUpdateManyWithoutVotedInput;
  creator?: UserUpdateOneRequiredWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  polls?: PollUpdateManyWithoutCreatorInput;
  voted?: PollUpdateManyWithoutVotedInput;
  votes?: VoteUpdateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface UserUpdateOneRequiredWithoutPollsInput {
  create?: UserCreateWithoutPollsInput;
  update?: UserUpdateWithoutPollsDataInput;
  upsert?: UserUpsertWithoutPollsInput;
  connect?: UserWhereUniqueInput;
}

export interface PollCreateOneWithoutRecipientsInput {
  create?: PollCreateWithoutRecipientsInput;
  connect?: PollWhereUniqueInput;
}

export interface UserUpdateWithoutPollsDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  voted?: PollUpdateManyWithoutVotedInput;
  votes?: VoteUpdateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  update?: UserUpdateWithoutVotesDataInput;
  upsert?: UserUpsertWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface PollUpdateManyWithoutVotedInput {
  create?: PollCreateWithoutVotedInput[] | PollCreateWithoutVotedInput;
  delete?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  connect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  disconnect?: PollWhereUniqueInput[] | PollWhereUniqueInput;
  update?:
    | PollUpdateWithWhereUniqueWithoutVotedInput[]
    | PollUpdateWithWhereUniqueWithoutVotedInput;
  upsert?:
    | PollUpsertWithWhereUniqueWithoutVotedInput[]
    | PollUpsertWithWhereUniqueWithoutVotedInput;
}

export interface PollCreateInput {
  title: String;
  description: String;
  options?: OptionCreateManyWithoutPollInput;
  recipients?: RecipientCreateManyWithoutPollInput;
  voted?: UserCreateManyWithoutVotedInput;
  creator: UserCreateOneWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface PollUpdateWithWhereUniqueWithoutVotedInput {
  where: PollWhereUniqueInput;
  data: PollUpdateWithoutVotedDataInput;
}

export interface RecipientCreateWithoutPollInput {
  email: String;
  hasSentEmail?: Boolean;
}

export interface PollUpdateWithoutVotedDataInput {
  title?: String;
  description?: String;
  options?: OptionUpdateManyWithoutPollInput;
  recipients?: RecipientUpdateManyWithoutPollInput;
  creator?: UserUpdateOneRequiredWithoutPollsInput;
  access?: AccessType;
  isPublished?: Boolean;
  isClosed?: Boolean;
  isActive?: Boolean;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  option?: OptionWhereInput;
  poll?: PollWhereInput;
  creator?: UserWhereInput;
  isActive?: Boolean;
  isActive_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface PollUpsertWithWhereUniqueWithoutVotedInput {
  where: PollWhereUniqueInput;
  update: PollUpdateWithoutVotedDataInput;
  create: PollCreateWithoutVotedInput;
}

export interface VoteUpsertWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutOptionDataInput;
  create: VoteCreateWithoutOptionInput;
}

export interface VoteUpsertWithWhereUniqueWithoutCreatorInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutCreatorDataInput;
  create: VoteCreateWithoutCreatorInput;
}

export interface OptionUpsertWithoutVotesInput {
  update: OptionUpdateWithoutVotesDataInput;
  create: OptionCreateWithoutVotesInput;
}

export interface PollUpsertWithoutOptionsInput {
  update: PollUpdateWithoutOptionsDataInput;
  create: PollCreateWithoutOptionsInput;
}

export interface UserUpsertWithoutPollsInput {
  update: UserUpdateWithoutPollsDataInput;
  create: UserCreateWithoutPollsInput;
}

export interface OptionCreateInput {
  description: String;
  votes?: VoteCreateManyWithoutOptionInput;
  poll: PollCreateOneWithoutOptionsInput;
  creator: UserCreateOneInput;
  isActive?: Boolean;
}

export interface PollUpdateOneRequiredWithoutRecipientsInput {
  create?: PollCreateWithoutRecipientsInput;
  update?: PollUpdateWithoutRecipientsDataInput;
  upsert?: PollUpsertWithoutRecipientsInput;
  connect?: PollWhereUniqueInput;
}

export interface VoteCreateWithoutCreatorInput {
  option: OptionCreateOneWithoutVotesInput;
  poll: PollCreateOneInput;
  isActive?: Boolean;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  polls?: PollCreateManyWithoutCreatorInput;
  voted?: PollCreateManyWithoutVotedInput;
  votes?: VoteCreateManyWithoutCreatorInput;
  isActive?: Boolean;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValuesNode {
  id: ID_Output;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VotePreviousValues
  extends Promise<VotePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateOptionNode {
  count: Int;
}

export interface AggregateOption
  extends Promise<AggregateOptionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOptionSubscription
  extends Promise<AsyncIterator<AggregateOptionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteNode {
  id: ID_Output;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Vote extends Promise<VoteNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  option: <T = Option>() => T;
  poll: <T = Poll>() => T;
  creator: <T = User>() => T;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<VoteNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  option: <T = OptionSubscription>() => T;
  poll: <T = PollSubscription>() => T;
  creator: <T = UserSubscription>() => T;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OptionEdgeNode {
  cursor: String;
}

export interface OptionEdge extends Promise<OptionEdgeNode>, Fragmentable {
  node: <T = Option>() => T;
  cursor: () => Promise<String>;
}

export interface OptionEdgeSubscription
  extends Promise<AsyncIterator<OptionEdgeNode>>,
    Fragmentable {
  node: <T = OptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteEdgeNode {
  cursor: String;
}

export interface VoteEdge extends Promise<VoteEdgeNode>, Fragmentable {
  node: <T = Vote>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdgeNode>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OptionConnectionNode {}

export interface OptionConnection
  extends Promise<OptionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<OptionEdgeNode>>() => T;
  aggregate: <T = AggregateOption>() => T;
}

export interface OptionConnectionSubscription
  extends Promise<AsyncIterator<OptionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOptionSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  polls: <T = FragmentableArray<PollNode>>(
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  voted: <T = FragmentableArray<PollNode>>(
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = FragmentableArray<VoteNode>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  polls: <T = Promise<AsyncIterator<PollSubscription>>>(
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  voted: <T = Promise<AsyncIterator<PollSubscription>>>(
    args?: {
      where?: PollWhereInput;
      orderBy?: PollOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface VoteSubscriptionPayload
  extends Promise<VoteSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Vote>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValues>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface OptionNode {
  id: ID_Output;
  description: String;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Option extends Promise<OptionNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  votes: <T = FragmentableArray<VoteNode>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  poll: <T = Poll>() => T;
  creator: <T = User>() => T;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OptionSubscription
  extends Promise<AsyncIterator<OptionNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  poll: <T = PollSubscription>() => T;
  creator: <T = UserSubscription>() => T;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipientEdgeNode {
  cursor: String;
}

export interface RecipientEdge
  extends Promise<RecipientEdgeNode>,
    Fragmentable {
  node: <T = Recipient>() => T;
  cursor: () => Promise<String>;
}

export interface RecipientEdgeSubscription
  extends Promise<AsyncIterator<RecipientEdgeNode>>,
    Fragmentable {
  node: <T = RecipientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OptionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface OptionSubscriptionPayload
  extends Promise<OptionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Option>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OptionPreviousValues>() => T;
}

export interface OptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OptionSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OptionPreviousValuesSubscription>() => T;
}

export interface AggregatePollNode {
  count: Int;
}

export interface AggregatePoll
  extends Promise<AggregatePollNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePollSubscription
  extends Promise<AsyncIterator<AggregatePollNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OptionPreviousValuesNode {
  id: ID_Output;
  description: String;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OptionPreviousValues
  extends Promise<OptionPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OptionPreviousValuesSubscription
  extends Promise<AsyncIterator<OptionPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PollConnectionNode {}

export interface PollConnection
  extends Promise<PollConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PollEdgeNode>>() => T;
  aggregate: <T = AggregatePoll>() => T;
}

export interface PollConnectionSubscription
  extends Promise<AsyncIterator<PollConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PollEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePollSubscription>() => T;
}

export interface RecipientNode {
  id: ID_Output;
  email: String;
  hasSentEmail: Boolean;
}

export interface Recipient extends Promise<RecipientNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  poll: <T = Poll>() => T;
  hasSentEmail: () => Promise<Boolean>;
}

export interface RecipientSubscription
  extends Promise<AsyncIterator<RecipientNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  poll: <T = PollSubscription>() => T;
  hasSentEmail: () => Promise<AsyncIterator<Boolean>>;
}

export interface VoteConnectionNode {}

export interface VoteConnection
  extends Promise<VoteConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<VoteEdgeNode>>() => T;
  aggregate: <T = AggregateVote>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface PollSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PollSubscriptionPayload
  extends Promise<PollSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Poll>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PollPreviousValues>() => T;
}

export interface PollSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PollSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PollSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PollPreviousValuesSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RecipientConnectionNode {}

export interface RecipientConnection
  extends Promise<RecipientConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RecipientEdgeNode>>() => T;
  aggregate: <T = AggregateRecipient>() => T;
}

export interface RecipientConnectionSubscription
  extends Promise<AsyncIterator<RecipientConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipientSubscription>() => T;
}

export interface RecipientPreviousValuesNode {
  id: ID_Output;
  email: String;
  hasSentEmail: Boolean;
}

export interface RecipientPreviousValues
  extends Promise<RecipientPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  hasSentEmail: () => Promise<Boolean>;
}

export interface RecipientPreviousValuesSubscription
  extends Promise<AsyncIterator<RecipientPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  hasSentEmail: () => Promise<AsyncIterator<Boolean>>;
}

export interface RecipientSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RecipientSubscriptionPayload
  extends Promise<RecipientSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Recipient>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipientPreviousValues>() => T;
}

export interface RecipientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipientSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipientPreviousValuesSubscription>() => T;
}

export interface PollNode {
  id: ID_Output;
  title: String;
  description: String;
  access: AccessType;
  isPublished: Boolean;
  isClosed: Boolean;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Poll extends Promise<PollNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  options: <T = FragmentableArray<OptionNode>>(
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recipients: <T = FragmentableArray<RecipientNode>>(
    args?: {
      where?: RecipientWhereInput;
      orderBy?: RecipientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  voted: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  creator: <T = User>() => T;
  access: () => Promise<AccessType>;
  isPublished: () => Promise<Boolean>;
  isClosed: () => Promise<Boolean>;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PollSubscription
  extends Promise<AsyncIterator<PollNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  options: <T = Promise<AsyncIterator<OptionSubscription>>>(
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recipients: <T = Promise<AsyncIterator<RecipientSubscription>>>(
    args?: {
      where?: RecipientWhereInput;
      orderBy?: RecipientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  voted: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  creator: <T = UserSubscription>() => T;
  access: () => Promise<AsyncIterator<AccessType>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isClosed: () => Promise<AsyncIterator<Boolean>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PollPreviousValuesNode {
  id: ID_Output;
  title: String;
  description: String;
  access: AccessType;
  isPublished: Boolean;
  isClosed: Boolean;
  isActive: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PollPreviousValues
  extends Promise<PollPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  access: () => Promise<AccessType>;
  isPublished: () => Promise<Boolean>;
  isClosed: () => Promise<Boolean>;
  isActive: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PollPreviousValuesSubscription
  extends Promise<AsyncIterator<PollPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  access: () => Promise<AsyncIterator<AccessType>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isClosed: () => Promise<AsyncIterator<Boolean>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PollEdgeNode {
  cursor: String;
}

export interface PollEdge extends Promise<PollEdgeNode>, Fragmentable {
  node: <T = Poll>() => T;
  cursor: () => Promise<String>;
}

export interface PollEdgeSubscription
  extends Promise<AsyncIterator<PollEdgeNode>>,
    Fragmentable {
  node: <T = PollSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecipientNode {
  count: Int;
}

export interface AggregateRecipient
  extends Promise<AggregateRecipientNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipientSubscription
  extends Promise<AsyncIterator<AggregateRecipientNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVoteNode {
  count: Int;
}

export interface AggregateVote
  extends Promise<AggregateVoteNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVoteNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `https://poll-position-server.herokuapp.com/poll-position/dev`,
  secret: `MzIxcG9sbHBvc2l0aW9uMTIz`
});
export const prisma = new Prisma();
