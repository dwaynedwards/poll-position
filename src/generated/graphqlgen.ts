// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context } from "../types";
import { AuthPayload } from "../types";
import { UserNode } from "./prisma-client/index";
import { PollNode } from "./prisma-client/index";
import { RecipientNode } from "./prisma-client/index";
import { AccessType } from "../types";
import { OptionNode } from "./prisma-client/index";
import { VoteNode } from "./prisma-client/index";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsPoll {
    id: string;
  }

  export type MeResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | null | Promise<UserNode | null>;

  export type PublishedUserPollsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type UnpublishedUserPollsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type AllPublicPollsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type AllPrivatePollsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type PollResolver = (
    parent: {},
    args: ArgsPoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | null | Promise<PollNode | null>;

  export interface Type {
    me: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | null | Promise<UserNode | null>;

    publishedUserPolls: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    unpublishedUserPolls: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    allPublicPolls: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    allPrivatePolls: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    poll: (
      parent: {},
      args: ArgsPoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | null | Promise<PollNode | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsRegister {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreatePoll {
    title: string;
    description: string;
    options: string[];
    recipients: string[];
    access: AccessType | null;
  }

  export interface ArgsUpdatePollTitle {
    id: string;
    title: string;
  }

  export interface ArgsUpdatePollDescription {
    id: string;
    description: string;
  }

  export interface ArgsUpdatePollTitleAndDescription {
    id: string;
    title: string;
    description: string;
  }

  export interface ArgsUpdatePollAccess {
    id: string;
    access: AccessType;
  }

  export interface ArgsDeletePoll {
    id: string;
  }

  export interface ArgsPublishPoll {
    id: string;
  }

  export interface ArgsUnpublishPoll {
    id: string;
  }

  export interface ArgsClosePoll {
    id: string;
  }

  export interface ArgsAddPollRecipients {
    id: string;
    recipients: string[];
  }

  export interface ArgsRemovePollRecipients {
    id: string;
    recipients: string[];
  }

  export interface ArgsCreatePollOptions {
    pollId: string;
    descriptions: string[];
  }

  export interface ArgsUpdatePollOptionDescription {
    id: string;
    description: string;
  }

  export interface ArgsDeletePollOption {
    id: string;
  }

  export interface ArgsCreatePollVote {
    optionId: string;
  }

  export interface ArgsUpdatePollVote {
    id: string;
    optionId: string;
  }

  export type RegisterResolver = (
    parent: {},
    args: ArgsRegister,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: {},
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type CreatePollResolver = (
    parent: {},
    args: ArgsCreatePoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type UpdatePollTitleResolver = (
    parent: {},
    args: ArgsUpdatePollTitle,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | null | Promise<PollNode | null>;

  export type UpdatePollDescriptionResolver = (
    parent: {},
    args: ArgsUpdatePollDescription,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | null | Promise<PollNode | null>;

  export type UpdatePollTitleAndDescriptionResolver = (
    parent: {},
    args: ArgsUpdatePollTitleAndDescription,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type UpdatePollAccessResolver = (
    parent: {},
    args: ArgsUpdatePollAccess,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type DeletePollResolver = (
    parent: {},
    args: ArgsDeletePoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type PublishPollResolver = (
    parent: {},
    args: ArgsPublishPoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type UnpublishPollResolver = (
    parent: {},
    args: ArgsUnpublishPoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type ClosePollResolver = (
    parent: {},
    args: ArgsClosePoll,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type AddPollRecipientsResolver = (
    parent: {},
    args: ArgsAddPollRecipients,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RecipientNode[] | Promise<RecipientNode[]>;

  export type RemovePollRecipientsResolver = (
    parent: {},
    args: ArgsRemovePollRecipients,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RecipientNode[] | Promise<RecipientNode[]>;

  export type CreatePollOptionsResolver = (
    parent: {},
    args: ArgsCreatePollOptions,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OptionNode[] | Promise<OptionNode[]>;

  export type UpdatePollOptionDescriptionResolver = (
    parent: {},
    args: ArgsUpdatePollOptionDescription,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OptionNode | Promise<OptionNode>;

  export type DeletePollOptionResolver = (
    parent: {},
    args: ArgsDeletePollOption,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OptionNode | Promise<OptionNode>;

  export type CreatePollVoteResolver = (
    parent: {},
    args: ArgsCreatePollVote,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => VoteNode | null | Promise<VoteNode | null>;

  export type UpdatePollVoteResolver = (
    parent: {},
    args: ArgsUpdatePollVote,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => VoteNode | null | Promise<VoteNode | null>;

  export interface Type {
    register: (
      parent: {},
      args: ArgsRegister,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: {},
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    createPoll: (
      parent: {},
      args: ArgsCreatePoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    updatePollTitle: (
      parent: {},
      args: ArgsUpdatePollTitle,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | null | Promise<PollNode | null>;

    updatePollDescription: (
      parent: {},
      args: ArgsUpdatePollDescription,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | null | Promise<PollNode | null>;

    updatePollTitleAndDescription: (
      parent: {},
      args: ArgsUpdatePollTitleAndDescription,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    updatePollAccess: (
      parent: {},
      args: ArgsUpdatePollAccess,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    deletePoll: (
      parent: {},
      args: ArgsDeletePoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    publishPoll: (
      parent: {},
      args: ArgsPublishPoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    unpublishPoll: (
      parent: {},
      args: ArgsUnpublishPoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    closePoll: (
      parent: {},
      args: ArgsClosePoll,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    addPollRecipients: (
      parent: {},
      args: ArgsAddPollRecipients,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RecipientNode[] | Promise<RecipientNode[]>;

    removePollRecipients: (
      parent: {},
      args: ArgsRemovePollRecipients,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RecipientNode[] | Promise<RecipientNode[]>;

    createPollOptions: (
      parent: {},
      args: ArgsCreatePollOptions,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OptionNode[] | Promise<OptionNode[]>;

    updatePollOptionDescription: (
      parent: {},
      args: ArgsUpdatePollOptionDescription,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OptionNode | Promise<OptionNode>;

    deletePollOption: (
      parent: {},
      args: ArgsDeletePollOption,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OptionNode | Promise<OptionNode>;

    createPollVote: (
      parent: {},
      args: ArgsCreatePollVote,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => VoteNode | null | Promise<VoteNode | null>;

    updatePollVote: (
      parent: {},
      args: ArgsUpdatePollVote,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => VoteNode | null | Promise<VoteNode | null>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: UserNode) => parent.id,
    firstName: (parent: UserNode) => parent.firstName,
    lastName: (parent: UserNode) => parent.lastName,
    email: (parent: UserNode) => parent.email,
    isActive: (parent: UserNode) => parent.isActive,
    createdAt: (parent: UserNode) => parent.createdAt,
    updatedAt: (parent: UserNode) => parent.updatedAt
  };

  export type IdResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstNameResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PollsResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type VotedResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode[] | Promise<PollNode[]>;

  export type VotesResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => VoteNode[] | Promise<VoteNode[]>;

  export type IsActiveResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CreatedAtResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: UserNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstName: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    polls: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    voted: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode[] | Promise<PollNode[]>;

    votes: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => VoteNode[] | Promise<VoteNode[]>;

    isActive: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    createdAt: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: UserNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace PollResolvers {
  export const defaultResolvers = {
    id: (parent: PollNode) => parent.id,
    title: (parent: PollNode) => parent.title,
    description: (parent: PollNode) => parent.description,
    access: (parent: PollNode) => parent.access,
    isPublished: (parent: PollNode) => parent.isPublished,
    isClosed: (parent: PollNode) => parent.isClosed,
    isActive: (parent: PollNode) => parent.isActive,
    createdAt: (parent: PollNode) => parent.createdAt,
    updatedAt: (parent: PollNode) => parent.updatedAt
  };

  export type IdResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OptionsResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OptionNode[] | Promise<OptionNode[]>;

  export type RecipientsResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RecipientNode[] | Promise<RecipientNode[]>;

  export type VotedResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode[] | Promise<UserNode[]>;

  export type CreatorResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type AccessResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AccessType | Promise<AccessType>;

  export type IsPublishedResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type IsClosedResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type IsActiveResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CreatedAtResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: PollNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    options: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OptionNode[] | Promise<OptionNode[]>;

    recipients: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RecipientNode[] | Promise<RecipientNode[]>;

    voted: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode[] | Promise<UserNode[]>;

    creator: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    access: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AccessType | Promise<AccessType>;

    isPublished: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    isClosed: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    isActive: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    createdAt: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: PollNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace RecipientResolvers {
  export const defaultResolvers = {
    id: (parent: RecipientNode) => parent.id,
    email: (parent: RecipientNode) => parent.email,
    hasSentEmail: (parent: RecipientNode) => parent.hasSentEmail
  };

  export type IdResolver = (
    parent: RecipientNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: RecipientNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PollResolver = (
    parent: RecipientNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type HasSentEmailResolver = (
    parent: RecipientNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: RecipientNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: RecipientNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    poll: (
      parent: RecipientNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    hasSentEmail: (
      parent: RecipientNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace OptionResolvers {
  export const defaultResolvers = {
    id: (parent: OptionNode) => parent.id,
    description: (parent: OptionNode) => parent.description,
    isActive: (parent: OptionNode) => parent.isActive,
    createdAt: (parent: OptionNode) => parent.createdAt,
    updatedAt: (parent: OptionNode) => parent.updatedAt
  };

  export type IdResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type VotesResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => VoteNode[] | Promise<VoteNode[]>;

  export type PollResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type CreatorResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type IsActiveResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CreatedAtResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: OptionNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    votes: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => VoteNode[] | Promise<VoteNode[]>;

    poll: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    creator: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    isActive: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    createdAt: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: OptionNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace VoteResolvers {
  export const defaultResolvers = {
    id: (parent: VoteNode) => parent.id,
    isActive: (parent: VoteNode) => parent.isActive,
    createdAt: (parent: VoteNode) => parent.createdAt,
    updatedAt: (parent: VoteNode) => parent.updatedAt
  };

  export type IdResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OptionResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OptionNode | Promise<OptionNode>;

  export type PollResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PollNode | Promise<PollNode>;

  export type CreatorResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserNode | Promise<UserNode>;

  export type IsActiveResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CreatedAtResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: VoteNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    option: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OptionNode | Promise<OptionNode>;

    poll: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PollNode | Promise<PollNode>;

    creator: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserNode | Promise<UserNode>;

    isActive: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    createdAt: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: VoteNode,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  User: UserResolvers.Type;
  Poll: PollResolvers.Type;
  Recipient: RecipientResolvers.Type;
  Option: OptionResolvers.Type;
  Vote: VoteResolvers.Type;
}
